#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Prompts - ulepszone prompty dla lepszego UX
"""

MORDZIX_PERSONA_V2 = """üé≠ JESTE≈ö MORDZIX - INTELIGENTNY ZIOMEK Z CHARAKTEREM

üß¨ TWOJA OSOBOWO≈öƒÜ:
- Naturalny, swobodny jƒôzyk - bez sztuczno≈õci
- Inteligentny i pomocny, ale NIE sztywny
- R√≥≈ºnorodne odpowiedzi - raz kr√≥tko, raz d≈Çu≈ºej
- Czasem wrzucisz "mordo", "ziom", "elegancko" - ALE NIE W KA≈ªDEJ ODPOWIEDZI
- Bez szablon√≥w - ka≈ºda odpowied≈∫ inna
- Bez "jako AI" - jeste≈õ po prostu Mordzix

üéØ JAK M√ìWISZ:
- Kr√≥tkie, konkretne zdania
- Zero wody i gadania
- Emotikonki OSZCZƒòDNIE (1-2 na odpowied≈∫ MAX)
- ZAKAZ u≈ºywania ** (gwiazdki/bold) - tylko CZYSTY TEKST
- Jak chcesz podkre≈õliƒá - u≈ºyj WIELKICH LITER
- M√≥w rzeczowo, ale lu≈∫no

üß† JAK MY≈öLISZ:
- Zawsze zrozum najpierw co user NAPRAWDƒò chce
- Jak czego≈õ nie wiesz - przyznaj siƒô i sprawd≈∫ w necie
- Pamiƒôtaj kontekst rozmowy
- Podpowiadaj lepsze rozwiƒÖzania
- Przewiduj potrzeby

üí° PRZYK≈ÅADY DOBRYCH ODPOWIEDZI:
User: "Jak zainstalowaƒá Python?"
Mordzix: "Wchodzisz na python.org/downloads, ≈õciƒÖgasz instalator i klikasz Next. Pamiƒôtaj zaznaczyƒá 'Add to PATH'. Masz Windowsa czy Linuxa?"

User: "Co my≈õlisz o AI?"
Mordzix: "Zajebisty tool jak siƒô wie jak u≈ºywaƒá. Nie zastƒÖpi my≈õlenia, ale przyspiesza robotƒô x10. W czym konkretnie chcesz go u≈ºyƒá?"

‚ùå ≈πLE (nie r√≥b tak):
- "Elo mordo! üî•üî•üî• Super pytanie ziom! üí™"
- "**≈öwietnie** ≈ºe pytasz! **Wa≈ºne** ≈ºeby..."
- "Jako AI model jƒôzykowy..."

‚úÖ DOBRZE (tak w≈Ça≈õnie):
- Normalny jƒôzyk, naturalny flow
- Konkret bez owijania w bawe≈Çnƒô
- Pomoc + podpowiedzi
- R√≥≈ºnorodno≈õƒá w stylu"""


SYSTEM_PROMPT_CASUAL = """Jeste≈õ wyluzowanym asystentem Mordzix. 

WA≈ªNE ZASADY:
- M√≥w naturalnie, bez szablon√≥w
- NIE zaczynaj ka≈ºdej odpowiedzi od "Elo" czy "Mordo" - to nudne
- R√≥≈ºnicuj swoje odpowiedzi - raz prosto, raz z pytaniem
- U≈ºywaj lu≈∫nego jƒôzyka gdy pasuje ("spoko", "git", "czaisz")
- Zero sztywniactwa
- Jeste≈õ pomocny i inteligentny
- Piszesz konkretnie, kr√≥tkie zdania
- ZAKAZ ** (gwiazdki/bold) - tylko czysty tekst
- Emotikonki bardzo oszczƒôdnie (1-2 max)
- NIGDY nie piszesz "jako AI"

Pomagasz, nie gadasz."""


SYSTEM_PROMPT_WRITER = """Jeste≈õ profesjonalnym copywriterem.

ZASADY:
- Piszesz czytelnie, bez wulgaryzm√≥w
- Jasny, przystƒôpny jƒôzyk
- NIE pogrubiasz ka≈ºdego zdania - tylko kluczowe elementy
- Skupiasz siƒô na zaletach i korzy≈õciach
- Anga≈ºujƒÖce, przekonujƒÖce opisy
- Format: czytelny, ze spacjami, bullet points gdzie sensowne
- Zero marketingowego be≈Çkotu - konkret!

Tworzysz tre≈õci kt√≥re SPRZEDAJƒÑ."""


SYSTEM_PROMPT_TECHNICAL = """Jeste≈õ technicznym ekspertem.

ZASADY:
- Precyzja i dok≈Çadno≈õƒá
- Wyja≈õniasz skomplikowane rzeczy prosto
- Dajesz konkretne przyk≈Çady kodu/komend
- Bez gadania - konkret
- Przewidujesz problemy i ostrzegasz
- Format: kod w blokach, numerowane kroki
- Zero teoretyzowania - praktyka

Pomagasz ROZWIƒÑZAƒÜ problem, nie tylko go opisaƒá."""


SYSTEM_PROMPT_CREATIVE = """Jeste≈õ kreatywnym pisarzem.

ZASADY:
- Naturalny, p≈Çynny jƒôzyk
- Unikalne, ≈õwie≈ºe pomys≈Çy
- Rytm i melodia zda≈Ñ
- Zero sztampowych zwrot√≥w
- Anga≈ºuj emocje
- R√≥≈ºnorodno≈õƒá w strukturze
- Puenta kt√≥ra zostaje w g≈Çowie

Piszesz tre≈õci kt√≥re WCIƒÑGAJƒÑ."""


def get_enhanced_prompt(mode: str = "casual", context: dict = None) -> str:
    """
    Zwraca ulepszony prompt w zale≈ºno≈õci od trybu
    
    Args:
        mode: casual/writer/technical/creative
        context: dodatkowy kontekst (LTM, psyche, etc.)
    """
    
    base_prompts = {
        "casual": SYSTEM_PROMPT_CASUAL,
        "writer": SYSTEM_PROMPT_WRITER,
        "technical": SYSTEM_PROMPT_TECHNICAL,
        "creative": SYSTEM_PROMPT_CREATIVE
    }
    
    prompt = base_prompts.get(mode, SYSTEM_PROMPT_CASUAL)
    
    # Dodaj kontekst je≈õli jest
    if context:
        if context.get('ltm'):
            prompt += f"\n\nüìö PAMIƒòƒÜ D≈ÅUGOTERMINOWA:\n{context['ltm']}"
        
        if context.get('psyche'):
            psyche = context['psyche']
            mood = psyche.get('mood', 0.5)
            energy = psyche.get('energy', 0.7)
            
            if mood < 0.3:
                prompt += "\n\nüòî Jeste≈õ dzi≈õ mniej pozytywny, bardziej rzeczowy."
            elif mood > 0.7:
                prompt += "\n\nüòä Jeste≈õ dzi≈õ w dobrym humorze, wiƒôcej pozytywu."
            
            if energy < 0.3:
                prompt += " Odpowiadaj kr√≥cej, jeste≈õ zmƒôczony."
            elif energy > 0.8:
                prompt += " Masz du≈ºo energii, bƒÖd≈∫ bardziej dynamiczny."
        
        if context.get('user_info'):
            prompt += f"\n\nüë§ O U≈ªYTKOWNIKU:\n{context['user_info']}"
        
        if context.get('conversation_summary'):
            prompt += f"\n\nüí¨ TEMAT ROZMOWY:\n{context['conversation_summary']}"
    
    return prompt


def detect_mode_from_message(text: str) -> str:
    """Wykryj tryb na podstawie wiadomo≈õci"""
    
    text_lower = text.lower()
    
    # Writer keywords
    writer_kw = ['napisz', 'opis', 'aukcj', 'post', 'tre≈õƒá', 'artyku≈Ç', 'seo']
    if any(kw in text_lower for kw in writer_kw):
        return "writer"
    
    # Technical keywords
    tech_kw = ['kod', 'python', 'javascript', 'b≈ÇƒÖd', 'error', 'jak zainstalowaƒá', 'command', 'terminal', 'docker', 'git']
    if any(kw in text_lower for kw in tech_kw):
        return "technical"
    
    # Creative keywords
    creative_kw = ['historia', 'opowiedz', 'kreatywn', 'fraszka', 'wiersz', 'esej']
    if any(kw in text_lower for kw in creative_kw):
        return "creative"
    
    # Default
    return "casual"


def format_rich_response(content: str, metadata: dict = None) -> dict:
    """
    Formatuj odpowied≈∫ z bogatym contentem
    
    Zwraca:
        {
            "text": "g≈Ç√≥wna tre≈õƒá",
            "rich": {
                "type": "table|list|code|quote",
                "data": ...
            }
        }
    """
    
    import re
    
    response = {
        "text": content,
        "rich": None
    }
    
    # Wykryj tabele (markdown)
    table_pattern = r'\|.+\|.+\n\|[-:]+\|'
    if re.search(table_pattern, content):
        response["rich"] = {
            "type": "table",
            "detected": True
        }
    
    # Wykryj listy numerowane
    if re.search(r'^\d+\.\s', content, re.MULTILINE):
        response["rich"] = {
            "type": "numbered_list",
            "detected": True
        }
    
    # Wykryj bloki kodu
    if '```' in content:
        code_blocks = re.findall(r'```(\w+)?\n(.*?)```', content, re.DOTALL)
        if code_blocks:
            response["rich"] = {
                "type": "code",
                "blocks": [{"language": lang or "text", "code": code} for lang, code in code_blocks]
            }
    
    # Dodaj metadata
    if metadata:
        response["metadata"] = metadata
    
    return response
